

#Brute Force Solution: Time Complexity is O(m*n)
class Solution:
def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
for i in matrix:
for j in matrix:
if matrix[i][j]==target:
return True
"""
Binary Search Solution: log m + log n
We use the property that each row and each column are sorted. So if the target is 3, we
check if the middle row’s upper bound and lower bound are within the range. If the
target value is smaller than the middle row’s range then we can eliminate that row and
also the below row as the below row’s range would also be bigger than target.
The time complexity of this “column wise Binary search” would be log m + log n
Whereas a normal binary search through rows would be m log n which is larger.
"""
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        ROWS, COLS = len(matrix), len(matrix[0])
        
        top, bot = 0, ROWS-1
        while top<=bot:
            row = (top+bot)//2
            if target > matrix[row][-1]:
                top = row+1
            elif target < matrix[row][0]:
                bot = row - 1
            else:
                break
        if not (top <= bot):
            return False
        row = (top+bot)//2
        l,r = 0, COLS - 1
        while l<=r:
            m = (l+r)//2
            if target > matrix[row][m]:
                l = m + 1
            elif target < matrix[row][m]:
                r = m - 1
            else:
                return True
        return False
